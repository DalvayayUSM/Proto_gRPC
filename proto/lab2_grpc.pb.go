// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Lab2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TareaClient is the client API for Tarea service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TareaClient interface {
	MandarInfo(ctx context.Context, opts ...grpc.CallOption) (Tarea_MandarInfoClient, error)
	SolicitarInfo(ctx context.Context, in *MensajeRebeldes, opts ...grpc.CallOption) (*Conf, error)
	SubirInfo(ctx context.Context, in *MensajeCombine, opts ...grpc.CallOption) (*Conf, error)
	SacarInfo(ctx context.Context, in *PedidoData, opts ...grpc.CallOption) (*PedidoData, error)
}

type tareaClient struct {
	cc grpc.ClientConnInterface
}

func NewTareaClient(cc grpc.ClientConnInterface) TareaClient {
	return &tareaClient{cc}
}

func (c *tareaClient) MandarInfo(ctx context.Context, opts ...grpc.CallOption) (Tarea_MandarInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tarea_ServiceDesc.Streams[0], "/grpc.tarea/mandarInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &tareaMandarInfoClient{stream}
	return x, nil
}

type Tarea_MandarInfoClient interface {
	Send(*PedidoData) error
	CloseAndRecv() (*Conf, error)
	grpc.ClientStream
}

type tareaMandarInfoClient struct {
	grpc.ClientStream
}

func (x *tareaMandarInfoClient) Send(m *PedidoData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tareaMandarInfoClient) CloseAndRecv() (*Conf, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Conf)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tareaClient) SolicitarInfo(ctx context.Context, in *MensajeRebeldes, opts ...grpc.CallOption) (*Conf, error) {
	out := new(Conf)
	err := c.cc.Invoke(ctx, "/grpc.tarea/solicitarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tareaClient) SubirInfo(ctx context.Context, in *MensajeCombine, opts ...grpc.CallOption) (*Conf, error) {
	out := new(Conf)
	err := c.cc.Invoke(ctx, "/grpc.tarea/subirInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tareaClient) SacarInfo(ctx context.Context, in *PedidoData, opts ...grpc.CallOption) (*PedidoData, error) {
	out := new(PedidoData)
	err := c.cc.Invoke(ctx, "/grpc.tarea/sacarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TareaServer is the server API for Tarea service.
// All implementations must embed UnimplementedTareaServer
// for forward compatibility
type TareaServer interface {
	MandarInfo(Tarea_MandarInfoServer) error
	SolicitarInfo(context.Context, *MensajeRebeldes) (*Conf, error)
	SubirInfo(context.Context, *MensajeCombine) (*Conf, error)
	SacarInfo(context.Context, *PedidoData) (*PedidoData, error)
	mustEmbedUnimplementedTareaServer()
}

// UnimplementedTareaServer must be embedded to have forward compatible implementations.
type UnimplementedTareaServer struct {
}

func (UnimplementedTareaServer) MandarInfo(Tarea_MandarInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method MandarInfo not implemented")
}
func (UnimplementedTareaServer) SolicitarInfo(context.Context, *MensajeRebeldes) (*Conf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarInfo not implemented")
}
func (UnimplementedTareaServer) SubirInfo(context.Context, *MensajeCombine) (*Conf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubirInfo not implemented")
}
func (UnimplementedTareaServer) SacarInfo(context.Context, *PedidoData) (*PedidoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SacarInfo not implemented")
}
func (UnimplementedTareaServer) mustEmbedUnimplementedTareaServer() {}

// UnsafeTareaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TareaServer will
// result in compilation errors.
type UnsafeTareaServer interface {
	mustEmbedUnimplementedTareaServer()
}

func RegisterTareaServer(s grpc.ServiceRegistrar, srv TareaServer) {
	s.RegisterService(&Tarea_ServiceDesc, srv)
}

func _Tarea_MandarInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TareaServer).MandarInfo(&tareaMandarInfoServer{stream})
}

type Tarea_MandarInfoServer interface {
	SendAndClose(*Conf) error
	Recv() (*PedidoData, error)
	grpc.ServerStream
}

type tareaMandarInfoServer struct {
	grpc.ServerStream
}

func (x *tareaMandarInfoServer) SendAndClose(m *Conf) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tareaMandarInfoServer) Recv() (*PedidoData, error) {
	m := new(PedidoData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tarea_SolicitarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeRebeldes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TareaServer).SolicitarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tarea/solicitarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TareaServer).SolicitarInfo(ctx, req.(*MensajeRebeldes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tarea_SubirInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeCombine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TareaServer).SubirInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tarea/subirInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TareaServer).SubirInfo(ctx, req.(*MensajeCombine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tarea_SacarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TareaServer).SacarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tarea/sacarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TareaServer).SacarInfo(ctx, req.(*PedidoData))
	}
	return interceptor(ctx, in, info, handler)
}

// Tarea_ServiceDesc is the grpc.ServiceDesc for Tarea service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tarea_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tarea",
	HandlerType: (*TareaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "solicitarInfo",
			Handler:    _Tarea_SolicitarInfo_Handler,
		},
		{
			MethodName: "subirInfo",
			Handler:    _Tarea_SubirInfo_Handler,
		},
		{
			MethodName: "sacarInfo",
			Handler:    _Tarea_SacarInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "mandarInfo",
			Handler:       _Tarea_MandarInfo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/lab2.proto",
}
